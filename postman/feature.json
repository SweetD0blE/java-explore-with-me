{
  "info": {
    "_postman_id": "7ffd090b-7d26-4e37-8443-4a9de516dc22",
    "name": "EWM Tests - feature_comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26188113"
  },
  "item": [
    {
      "name": "Добавление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const requestor = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", requestor.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody.participantLimit = 7;\r",
              "        eventBody.requestModeration = true;\r",
              "        const event = await api.addEvent(user.id, eventBody);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        await api.publishEvent(event.id);\r",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);\r",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 201\", function () {\r",
              "    pm.response.to.have.status(201);   \r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const response = pm.response.json();\r",
              "\r",
              "pm.test(\"Check json fields\", function () {\r",
              "    pm.expect(response).to.have.property('id');\r",
              "    pm.expect(response).to.have.property('eventId');\r",
              "    pm.expect(response).to.have.property('authorId');\r",
              "    pm.expect(response).to.have.property('text');\r",
              "    pm.expect(response).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Check 'text' field\", function () {\r",
              "    pm.expect(response.text).to.equal(\"Комментарий к событию c id = 1\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий к событию c id = 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария с пустым текстом",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const requestor = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", requestor.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody.participantLimit = 7;\r",
              "        eventBody.requestModeration = true;\r",
              "        const event = await api.addEvent(user.id, eventBody);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        await api.publishEvent(event.id);\r",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);\r",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 400\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария с несуществующим пользователем",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "       const requestor = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", requestor.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody.participantLimit = 7;\r",
              "        eventBody.requestModeration = true;\r",
              "        const event = await api.addEvent(user.id, eventBody);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        await api.publishEvent(event.id);\r",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);\r",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 404\", function () {\r",
              "    pm.response.to.be.notFound;\r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий к событию c id = 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?userId=9999",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "9999"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к несуществующему событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 404\", function () {\r",
              "    pm.response.to.be.notFound;\r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий к событию c id = 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "9999"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к неопубликованному событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        const submittedUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', submittedUser.id);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 404\", function () {\r",
              "    pm.response.to.be.notFound;\r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий к событию c id = 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария от пользователя не участника события",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const requestor = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", requestor.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody.participantLimit = 7;\r",
              "        eventBody.requestModeration = true;\r",
              "        const event = await api.addEvent(user.id, eventBody);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        await api.publishEvent(event.id);\r",
              "        await api.publishParticipationRequest(event.id, requestor.id);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 404\", function () {\r",
              "    pm.response.to.be.notFound;\r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий к событию c id = 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария администратором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 204\", function () {\r",
              "    pm.response.to.have.status(204);   \r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "       const requestor = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set(\"uid\", requestor.id)",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        let eventBody = rnd.getEvent(category.id);",
              "        eventBody.participantLimit = 7;",
              "        eventBody.requestModeration = true;",
              "        const event = await api.addEvent(user.id, eventBody);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        await api.publishEvent(event.id);",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);",
              "        const createdComment = await api.createComment(requestor.id, event.id, {text:\"Комментарий\"});",
              "        pm.collectionVariables.set('commentId', createdComment.id);",
              "        ",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для теста\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария автором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 204\", function () {\r",
              "    pm.response.to.have.status(204);   \r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const requestor = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set(\"uid\", requestor.id)",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        let eventBody = rnd.getEvent(category.id);",
              "        eventBody.participantLimit = 7;",
              "        eventBody.requestModeration = true;",
              "        const event = await api.addEvent(user.id, eventBody);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        await api.publishEvent(event.id);",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);",
              "        const createdComment = await api.createComment(requestor.id, event.id, {text:\"Комментарий\"});",
              "        pm.collectionVariables.set('commentId', createdComment.id);",
              "        ",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для теста\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments/:commentId?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление комментария автором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 200\", function () {\r",
              "    pm.response.to.have.status(200);   \r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const response = pm.response.json();\r",
              "\r",
              "pm.test(\"Check json fields\", function () {\r",
              "    pm.expect(response).to.have.property('id');\r",
              "    pm.expect(response).to.have.property('eventId');\r",
              "    pm.expect(response).to.have.property('authorId');\r",
              "    pm.expect(response).to.have.property('text');\r",
              "    pm.expect(response).to.have.property('created');\r",
              "    pm.expect(response).to.have.property('edited');\r",
              "});\r",
              "\r",
              "pm.test(\"Check 'text' field\", function () {\r",
              "    pm.expect(response.text).to.equal(\"Комментарий для обновления\");\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "       ",
              "        const requestor = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set(\"uid\", requestor.id)",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        let eventBody = rnd.getEvent(category.id);",
              "        eventBody.participantLimit = 7;",
              "        eventBody.requestModeration = true;",
              "        const event = await api.addEvent(user.id, eventBody);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        await api.publishEvent(event.id);",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);",
              "        const createdComment = await api.createComment(requestor.id, event.id, {text:\"Комментарий\"});",
              "        pm.collectionVariables.set('commentId', createdComment.id);",
              "        ",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Комментарий для обновления\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments/:commentId?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление чужого комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 404\", function () {\r",
              "    pm.response.to.have.status(404);   \r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const requestor = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set('uid', 1);",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        let eventBody = rnd.getEvent(category.id);",
              "        eventBody['requestModeration'] = true",
              "        eventBody.participantLimit = 6;",
              "        let event = await api.addEvent(user.id, eventBody);",
              "        event = await api.publishEvent(event.id);",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);",
              "        await api.acceptParticipationRequest(event.id, user.id, requestToParticipate.id);",
              "        const createdComment = await api.createComment(requestor.id, event.id, {text:\"Комментарий\"});",
              "        pm.collectionVariables.set('commentId', createdComment.id);",
              "        ",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Test edited comment\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments/:commentId?userId={{uid}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "query": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получить 7 комментариев к событию",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status must be 200\", function () {\r",
              "    pm.response.to.have.status(200);   \r",
              "});\r",
              "\r",
              "pm.test(\"Response must contains body in json format\", function () {   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const response = pm.response.json();\r",
              "\r",
              "pm.test(\"Check size of comments\", function () {\r",
              "     pm.expect(response.length, 'comments array size must be 7').to.eql(7);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const requestor = await api.addUser(rnd.getUser());",
              "        pm.collectionVariables.set(\"uid\", requestor.id)",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        let eventBody = rnd.getEvent(category.id);",
              "        eventBody.participantLimit = 7;",
              "        eventBody.requestModeration = true;",
              "        const event = await api.addEvent(user.id, eventBody);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        await api.publishEvent(event.id);",
              "        const requestToParticipate = await api.publishParticipationRequest(event.id, requestor.id);",
              "        await api.acceptParticipationRequest(event.id, requestor.id, requestToParticipate.id);",
              "        for(i=0;i<10;i++)",
              "            await api.createComment(requestor.id, event.id, {text:\"Комментарий\"});",
              "        ",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            // выполняем наш скрипт",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?from=0&size=7",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "from",
              "value": "0"
            },
            {
              "key": "size",
              "value": "7"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "    async createComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/event/\" + eventId + \"/comments?userId=\" + userId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async updateComment(userId, commentId, comment, verbose=null) {",
          "        return this.patch(\"/event/\" + eventId + \"/comments\" + commentId + \"?userId=\" + userId, comment, \"Ошибка при обновлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": "",
      "type": "string"
    },
    {
      "key": "usersCount",
      "value": "1",
      "type": "string"
    },
    {
      "key": "catid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "request_body",
      "value": "",
      "type": "string"
    },
    {
      "key": "mail",
      "value": "",
      "type": "string"
    },
    {
      "key": "response",
      "value": "",
      "type": "string"
    },
    {
      "key": "uid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "catname",
      "value": "",
      "type": "string"
    },
    {
      "key": "eid",
      "value": "",
      "type": "string"
    },
    {
      "key": "compid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "toCheck",
      "value": "",
      "type": "string"
    },
    {
      "key": "newDataToSet",
      "value": "",
      "type": "string"
    },
    {
      "key": "uid1",
      "value": "",
      "type": "string"
    },
    {
      "key": "reqid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "catId",
      "value": "",
      "type": "string"
    },
    {
      "key": "confirmedRequests",
      "value": "",
      "type": "string"
    },
    {
      "key": "responseArr",
      "value": "",
      "type": "string"
    },
    {
      "key": "source1",
      "value": "",
      "type": "string"
    },
    {
      "key": "source2",
      "value": "",
      "type": "string"
    },
    {
      "key": "fromId",
      "value": "0",
      "type": "string"
    },
    {
      "key": "source",
      "value": "",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "1",
      "type": "string"
    }
  ]
}